(fold all region Ctrl+k Ctrl+0) ... (unfold all Ctrl+K Ctrl+J)
?Chapter 1 - Installing Rails
?Chapter 2 - Instant Gratification
?Chapter 3 - The Arhitecture of Rails Application 
?Chapter 4 - Introduction to Ruby
?Chapter 5 - The Depot Application
!Depot
?Chapter 6 - Task A: Creating the Application 
*Creating the Product Maintenance Application
    $ ​​rails​​ ​​new​​ ​​depot​
    $​​ ​​cd​​ ​​depot
    $ rails g scaffold Product title:string description:text image_url:string price:decimal
    in migration file after t.decimal :price 
        add , precision: 8, scale: 2
    $ rails​​ db:migrate
    in app/views/products/_form.html.erb after <%= form.text_area :description
        add , rows: 10, cols: 60
*Making Prettier Listings
    in db/seeds.rb
        add Product.delete_all
            Product.create!(title: 'Docker for Rails Developers',
            description:
                %{<p>
                <em>Build, Ship, and Run Your Applications Everywhere</em>
                Docker does for DevOps what Rails did for web development—it gives you 
                a new set of superpowers. Gone are “works on my machine” woes and lengthy 
                setup tasks, replaced instead by a simple, consistent, Docker-based 
                development environment that will have your team up and running in seconds. 
                Gain hands-on, real-world experience with a tool that’s rapidly becoming 
                fundamental to software development. Go from zero all the way to production 
                as Docker transforms the massive leap of deploying your app in the cloud 
                into a baby step.
                </p>},
            image_url: 'ridocker.jpg',
            price: 38.00)
            # . . .
            Product.create!(title: 'Build Chatbot Interactions',
            description:
                %{<p>
                <em>Responsive, Intuitive Interfaces with Ruby</em>
                The next step in the evolution of user interfaces is here. 
                Chatbots let your users interact with your service in their
                own natural language. Use free and open source tools along 
                with Ruby to build creative, useful, and unexpected interactions 
                for users. Take advantage of the Lita framework’s step-by-step 
                implementation strategy to simplify bot development and testing.
                From novices to experts, chatbots are an area in which everyone 
                can participate. Exercise your creativity by creating chatbot 
                skills for communicating, information, and fun.
                </p>},
            image_url: 'dpchat.jpg',
            price: 20.00)
            # . . .

            Product.create!(title: 'Programming Crystal',
            description:
                %{<p>
                <em>Create High-Performance, Safe, Concurrent Apps</em>
                Crystal is for Ruby programmers who want more performance or for 
                developers who enjoy working in a high-level scripting environment. Crystal 
                combines native execution speed and concurrency with Ruby-like syntax, so 
                you will feel right at home. This book, the first available on Crystal, 
                shows you how to write applications that have the beauty and elegance of a 
                modern language, combined with the power of types and modern concurrency 
                tooling. Now you can write beautiful code that runs faster, scales better, 
                and is a breeze to deploy.
                </p>},
            image_url: 'crystal.jpg',
            price: 40.00)
    in app/assets/images copy images from support archive
    $ rails db:seed
    in app/assets/stylesheets/products.scss
        add     .products {
                margin: 0;
                padding: 0.5em;
                a {
                    padding: 0.354em 0.5em;
                    border-radius: 0.354em;
                }
                table {
                    border-collapse: collapse;
                }
                td {
                    padding: 0.5em;
                    margin: 0;
                }
                tr.list_line_odd {
                    background-color: #effeff;
                }
                td.image {
                    display: none;
                    @media ( min-width: 30em ) {
                        display: block;
                        img {
                            height: 11.3em;
                        }
                    }
                }
                td.description {
                    h1 {
                        font-size: 1.4em;
                    }
                }
                td.actions {
                    ul {
                        padding: 0;
                        list-style: none;
                        li {
                            padding: 0.5em 0.5em;
                        }
                    }
                }
                tfoot {
                    td {
                        padding: 0.5em 0;
                    }
                }
            }
    in app/views/layouts/application.html.erb
        change inside body with
            <main class='<%= controller.controller_name %>'>
                <%= yield %>
            </main>
    in app/views/products/index.html.erb change all
        <% if notice %>
            <aside id="notice"><%= notice %></aside>
        <% end %>

        <h1>Products</h1>

        <table>
            <tfoot>
                <tr>
                <td colspan="3">
                    <%= link_to 'New Product', new_product_path %>
                </td>
                </tr>
            </tfoot>

            <tbody>
                <% @products.each do |product| %>
                <tr class= "<%= cycle('list_line_odd', 'list_line_even') %>" >
                    <td class="image">
                    <%= image_tag(product.image_url, class: 'list_image') %>
                    </td>
                    <td class="description">
                    <h1><%= product.title %></h1>
                    <p>
                        <%= truncate(strip_tags(product.description), length: 80) %>
                    </p>
                    </td>
                    <td class="actions">
                    <ul>
                        <li><%= link_to 'Show', product %></li>
                        <li><%= link_to 'Edit', edit_product_path(product) %></li>
                        <li><%= link_to 'Destroy', product, method: :delete, data: { confirm: 'Are you sure?' } %></li>
                    </ul>
                    </td>
                </tr>
                <% end %>
            </tbody>
        </table>
?Chapter 7 - Task B: Validation and Unit Testing
*Validating
    in app/models/product.rb
        add validates :title, :description, :image_url, presence: true
            validates :title, uniqueness: true
            validates :image_url, allow_blank: true, format: {
            with: %r{\.(gif|jpg|png)\z}i,
            message: 'must be an URL for GIF, JPG or PNG image.'
            }
            validates :price, numericality: { greater_than_or_equal_to: 0.01 }
?Chapter 8 - Task C: Catalog Display
*Creating the Catalog Listing
    $ rails g controller Store index
    in config/routes.rb 
        change get 'store/index'
        with root 'store#index', as: 'store_index'
    in app/controllers/store_controller.rb
        add @products = Product.order(:title)
    in app/views/store/index.html.erb change all to
        <% if notice %>
            <aside id="notice"><%= notice %></aside>
        <% end %>

        <h1>Your Pragmatic Catalog</h1>

        <ul class="catalog">
            <% cache @products do %>
                <% @products.each do |product| %>
                    <% cache product do%>
                    <li>
                        <%= image_tag(product.image_url) %>
                        <h2><%= product.title %></h2>
                        <p>
                            <%= sanitize(product.description) %>
                        </p>
                        <div class="price">
                            <%= number_to_currency(product.price) %>
                        </div>
                    </li>
                    <% end %>
                <% end %>
            <% end %>
        </ul>
    in app/assets/stylesheets/store.scss
        .store {
            max-width: 80em;
            ul.catalog {
                border-top: solid 0.250em;
                list-style: none;
                padding: 0;
                margin: 0;
                li {
                    padding: 1em;
                    margin: 0;
                    border-bottom: solid thin #ddd;
                    &::after {
                        clear: both;
                        content: " ";
                        display: block;
                    }
                    img {
                        float: left;
                        padding: 1em;
                        margin-right: 1em;
                        margin-bottom: 1em;
                        box-shadow: 0.176em 0.176em 0.54em 0px rgba(0,0,0,0.75);
                    }
                    .price {
                        font-size: 1.414em;
                    }
                }
            }
        }
    in app/views/layouts/application.html.erb
        change <title> to <title>Pragprog Books Online Store</title>
        change <body> to
            <header class="main">
                <%= image_tag 'logo.svg', alt: 'The Pragmatic Bookshelf' %>
            </header>
            <section class="content">
                <nav class="side_nav">
                    <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/questions">Questions</a></li>
                    <li><a href="/news">News</a></li>
                    <li><a href="/contact">Contact</a></li>
                    </ul>
                </nav>
                <main class='<%= controller.controller_name %>' >
                    <%= yield %>
                </main>
            </section>
    change app/assets/stylesheets/application.css to application.scss
    in app/assets/stylesheets/application.scss
        body {
            margin:0;
            padding: 0;
        }
        header.main {
            text-align: center;
            @media (min-width: 30em){
                text-align: left;
            }
            background: #282;
            margin: 0;
            h1 {
                display: none;
            }
        }

        .content {
            margin: 0;
            padding: 0;
            display: flex;
            display: -webkit-flex;
            flex-direction: column;
            -webkit-box-orient: vertical;
            -webkit-box-direction: normal;
            @media (min-width: 30em) {
                flex-direction: row;
                -webkit-box-orient: horizontal;
            }

            nav {
                padding-bottom: 1em;
                background: #141;
                text-align: center;
                @media (min-width: 30em) {
                    text-align: left;
                    padding: 1em;
                }
                ul {
                    list-style: none;
                    margin: 0;
                    padding: 0;
                    @media (min-width: 30em) {
                        padding-right: 1em;
                    }
                    li {
                        margin: 0;
                        padding: 0.5em;
                        text-transform: uppercase;
                        letter-spacing: 0.354em;
                        a {
                            color: #bfb;
                            text-decoration: none;
                        }
                        a:hover {
                            background: none;
                            color: white;
                        }
                    }
                }
            }
            main {
                padding: 0.5em;
            }
        }
?Chapter 9 - Task D: Cart Creation
*Finding a Cart
    $ rails g scaffold Cart
    $ rails db:migrate
    create a file app/controllers/concerns/current_cart.rb
        module CurrentCart
        private
            def set_cart
            @cart = Cart.find(session[:cart_id])
            rescue ActiveRecord::RecordNotFound
            @cart = Cart.create
            session[:cart_id] = @cart.id
            end
        end
*Connecting Products to Carts
    $ rails g scaffold LineItem product:references cart:belongs_to
    $ rails db:migrate
    in app/models/cart.rb
        add has_many :line_items, dependent: :destroy
    in app/models/product.rb
        at the begining add has_many :line_items
                            before_destroy :ensure_not_referenced_by_any_line_item
    at the end add private
                    def ensure_not_referenced_by_any_line_item
                        unless line_items.empty?
                        errors.add(:base, "Line Items present")
                        throw :abort
                        end
                    end
*Adding a Button
    in app/views/store/index.html.erb
        add after <%= number_to_currency(product.price) %>
        <%= button_to 'Add to Cart', line_items_path(product_id: product) %>
    in app/assets/stylesheets/store.scss after price {...} add
        form, div {
            display: inline;
        }
        input[type="submit"] {
            background-color: #282;
            border-radius: 0.354em;
            border: solid thin #141;
            color: white;
            font-size: 1em;
            padding: 0.354em 1em;
        }
        input[type="submit"]:hover {
            background-color: #141;
        }
    in app/controllers/line_items_controller.rb
        in the begining add include CurrentCart
                            before_action :set_cart, only: [:create]
        change @line_item = LineItem.new(line_item_params)
            to product = Product.find(params[:product_id])
                @line_item = @cart.line_items.build(product: product)
        change format.html { redirect_to @line_item
            to format.html { redirect_to @line_item.cart
    in app/views/carts/show.html.erb change all to
        <% if notice %>
            <aside id="notice"><%= notice %></aside>
        <% end %>
        <h2>Your Pragmatic Cart</h2>
        <ul>
            <% @cart.line_items.each do |item| %>
                <li><%= item.product.title %></li>
            <% end %>
        </ul>
    in app/assets/stylesheets/application.scss
        add .notice, #notice {
                background: #ffb;
                border-radius: 0.5em;
                border: solid 0.177em #882;
                color: #882;
                font-weight: bold;
                margin-bottom: 1em;
                padding: 1em 1.414em;
                text-align: center;
            }
?Chapter 10 - Task E: A Smarter Cart
*Creating a Smarter Cart
    $ rails g migration add_quantity_to_line_items quantity:integer
    in migration fil after :integer add ,default: 1
    $ rails db:migrate
    in app/models/cart.rb
        add def add_product(product)
                current_item = line_items.find_by(product_id: product.id)
                if current_item
                current_item.quantity += 1
                else
                current_item = line_items.build(product_id: product.id)
                end
                current_item
            end
    in app/controllers/line_items_controller.rb
        change @line_item = @cart.line_items.build(product: product)
            to @line_item = @cart.add_product(product)
    in app/views/carts/show.html.erb
        change <li><%= item.product.title %></li>
            to <li><%= item.quantity %>&times;<%= item.product.title %></li>
!combine existing lines in cart needed only if you've added products to cart
    $ rails g migration combine_items_in_cart
    in migration file change def change ... end with
        def up
            Cart.all.each do |cart|
            sums = cart.line_items.group(:product_id).sum(:quantity)

            sums.each do |product_id, quantity|
                if quantity > 1
                cart.line_items.where(product_id: product_id).delete_all
                item = cart.line_items.build(product_id: product_id)
                item.quantity = quantity
                item.save!
                end
            end
            end
        end
        
        def down
            LineItem.where("quantity>1").each do |line_item|
            line_item.quantity.times do
                LineItem.create(
                cart_id: line_item.cart_id,
                product_id: line_item.product_id,
                quantity: 1
                )
            end
            line_item.destroy
            end
        end
    $ rails db:migrate  
!end combine
*Handling Errors
    in app/controllers/carts_controller.rb
        before def index
            add rescue_from ActiveRecord::RecordNotFound, with: :invalid_cart  
        after def cart_params ... end
            add  def invalid_cart
                    logger.error "Attemp to access invalid cart #{params[:id]}"
                    redirect_to store_index_url, notice: "Invalid cart"
                end
    in app/controllers/line_items_controller.rb
        from params.require(:line_item).permit(:product_id, :cart_id) remove , :cart_id
*Finishing the Cart
    in app/views/carts/show.html.erb
        add  <%= button_to 'Empty cart', @cart, 
                method: :delete, 
                data: { confirm: "Are you sure?" } %>
    in app/controllers/carts_controller.rb
        change @cart.destroy ... destroyed." } to
             @cart.destroy if @cart.id == session[:cart_id]
            session[:cart_id] = nil
            respond_to do |format|
                format.html { redirect_to store_index_url, notice: "Your cart is currently empty" }
    in app/controllers/line_items_controller.rb
        change format.html { redirect_to @line_item.cart, notice: "Line item was successfully created." }
            to format.html { redirect_to @line_item.cart}
    in app/views/carts/show.html.erb replace all with
        <article>
            <% if notice %>
                <aside id="notice"><%= notice %></aside>
            <% end %>

            <h2>Your Cart</h2>
            <table>
                <% @cart.line_items.each do |line_item| %>
                    <tr>
                        <td class="quantity"><%= line_item.quantity %></td>
                        <td><%= line_item.product.title %></td>
                        <td class="price"><%= number_to_currency(line_item.total_price) %></td>
                    </tr>
                <% end %>
                <tfoot>
                    <tr>
                        <th colspan="2">Total:</th>
                        <th class="price"><%= number_to_currency(@cart.total_price) %></th>
                    </tr>
                </tfoot>
            </table>

            <%= button_to 'Empty cart', @cart, 
                method: :delete, 
                data: { confirm: "Are you sure?" } %>
        </article>
    in app/models/line_item.rb
        add def total_price
                product.price * quantity
            end
    in app/models/cart.rb
        add def total_price
                line_items.to_a.sum { |item| item.total_price}
            end
    in app/assets/stylesheets/carts.scss
        .carts {
            table {
                border-collapse: collapse;
            }
            td {
                padding: 0.5em;
            }
            td.quantity {
                white-space: nowrap;
            }
            td.quantity::after {
                content: " x";
            }
            td.price {
                font-weight: bold;
                text-align: right; 
            }
            tfoot {
                th, th.price {
                    font-weight: bold;
                    padding-top: 1em;
                }
                th {
                    text-align: right;
                }
                th.price {
                    border-top: solid thin;
                }
            }
            input[type="submit"] {
                background-color: #881;
                border-radius: 0.354em;
                border: solid thin #441;
                color: white;
                font-size: 1em;
                padding: 0.354em 1em;
            }
            input[type="submit"]:hover {
                background-color: #992;
            }
        } 
?Chapter 11 - Task F: Add a Dash of Ajax
*Moving the Cart
    in app/views/carts/show.html.erb change all to
        <%= render @cart %>
    create a file app/views/line_items/_line_item.html.erb
         <tr>
            <td class="quantity"><%= line_item.quantity %></td>
            <td><%= line_item.product.title %></td>
            <td class="price"><%= number_to_currency(line_item.total_price) %></td>
        </tr>
    create a file app/views/carts/_cart.html.erb
        <article>
            <% if notice %>
                <aside id="notice"><%= notice %></aside>
            <% end %>

            <h2>Your Cart</h2>
            <table>
                <%= render(cart.line_items) %>
                <tfoot>
                    <tr>
                        <th colspan="2">Total:</th>
                        <th class="price"><%= number_to_currency(cart.total_price) %></th>
                    </tr>
                </tfoot>
            </table>

            <%= button_to 'Empty cart', cart, 
                method: :delete, 
                data: { confirm: "Are you sure?" } %>
        </article>
    in app/views/layouts/application.html.erb after <nav class="side_nav">
        add <% if @cart %>
                <div id="cart" class="carts">
                    <%= render @cart %>
                </div>
            <% end %>
    in app/controllers/store_controller.rb before def index
        add include CurrentCart
            before_action :set_cart
    in app/assets/stylesheets/application.scss
        add #cart {
                article {
                    h2 {
                        margin-top: 0;
                    }
                    background-color: white;
                    border-radius: 0.5em;
                    margin: 1em;
                    padding: 1.414em;
                    @media (min-width: 30em) {
                        margin: 0;
                    }
                }
            }
    in app/controllers/line_items_controller.rb
        change format.html { redirect_to @line_item.cart}
            to format.html { redirect_to store_index_url}
    in app/views/layouts/application.html.erb
*Creating an Ajax-Based Cart
    in app/views/store/index.html.erb
        after <%= button_to 'Add to Cart', line_items_path(product_id: product)
            add , remote: true
    in app/controllers/line_items_controller.rb
        after format.html { ... } add format.js
    create a file app/views/line_items/create.js.erb
        cart = document.getElementById("cart")
        cart.innerHTML = "<%= j render(@cart) %>"
*Highlighting Changes
    in depot_m/app/assets/stylesheets/line_items.scss
        add @keyframes line-item-highlight {
                0% {
                    background: #8f8;
                }
                100% {
                    background: none;
                }
            }

            .line-item-highlight {
                animation: line-item-highlight 1s;
            }
    in app/controllers/line_items_controller.rb
        after format.js add {@current_item = @line_item}
    in app/views/line_items/_line_item.html.erb change <tr>
        with <% if line_item == @current_item %>
                <tr class="line-item-highlight">
            <% else %>
                <tr>
            <% end %>
*Hiding an Empty Cart with a Custom Helper
    in app/views/layouts/application.html.erb change <%= render @cart %>
        with <%= render_if @cart && @cart.line_items.any?, @cart %>
    in app/helpers/application_helper.rb
        add def render_if(condition, record)
                if condition
                    render record
                end
            end
    in app/views/line_items/create.js.erb
        add notice = document.getElementById("notice")
            if (notice) notice.style.display = "none"
*Broadcasting Updates with Action Cable
    $ rails g channel products
    in app/channels/products_channel.rb
        change # stream_from "some_channel" to stream_from "products"
    in app/controllers/products_controller.rb
        after format.json { render :show, status: :ok, location: @product }
        add @products = Product.all.order(:title)
            ActionCable.server.broadcast 'products',
            html: render_to_string('store/index', layout: false)
    in app/controllers/products_controller.rb
        change @products = Product.all to @products = Product.all.order(:title)
    in app/javascript/channels/products_channel.js after received(data) {
        add const storeElement = document.querySelector("main.store")
            if (storeElement) {
            storeElement.innerHTML = data.html
            }
?Chapter 12 - Task G: Check Out!
*Capturing an Order
    $ rails g scaffold Order name address:text email pay_type:integer
    $ rails g migration add_order_to_line_item order:references
    in app/models/order.rb
        add enum pay_type: {
                "Check" => 0,
                "Credit card" => 1,
                "Purchase order" => 2
            }
    in migration file add_order_to_line_item
        change to   add_reference :line_items, :order, null: true, foreign_key: true
                    change_column :line_items, :cart_id, :integer, null: true
    $ rails db:migrate
*Creating the order capture form
    in app/views/carts/_cart.html.erb
        change <%= button_to 'Empty cart' ... %>
            to <div class="actions">
                    <%= button_to 'Empty cart', cart, 
                        method: :delete, 
                        data: { confirm: "Are you sure?" } %>
                    <%= button_to 'Checkout', new_order_path,
                        method: :get,
                        class: "checkout" %>
                </div>
    in app/controllers/orders_controller.rb
        before before_action :set_order, only: %i[ show edit update destroy ]
            add include CurrentCart
                before_action :set_cart, only: [:new, :create]
                before_action :ensure_cart_isnt_empty, only: :new
        after def order_params ... end add
            def ensure_cart_isnt_empty
                if @cart.line_items.empty?
                    redirect_to store_index_url, notice: 'Your cart is empty'
                end
            end    
    in app/views/orders/new.html.erb change all to
        <section class="depot_form">
            <h1>Please Enter Your Details</h1>
            <%= render 'form', order: @order %>
        </section>
    in app/views/orders/_form.html.erb
        change <%= form.text_field :name %>
            to <%= form.text_field :name, size: 40 %>
        change <%= form.text_field :address %>
            to <%= form.text_area :address, rows: 3, cols: 40 %>
        change <%= form.text_field :email %>
            to <%= form.text_field :email, size: 40 %>
        change <%= form.number_field :pay_type %>
            to <%= form.select :pay_type, Order.pay_types.keys, prompt: 'Select a payment method' %>
        change <%= form.submit %>
            to <%= form.submit 'Place Order' %>
    in app/assets/stylesheets/application.scss
        add .depot_form {
            padding: 0 1em;
            h1 {
                font-size: 1.99em;
                line-height: 1.41em;
                margin-bottom: 0.5em;
                padding: 0;
            }
            .field, .actions {
                margin-bottom: 0.5em;
                padding: 0;
            }
            .actions {
                text-align: right;
                padding: 1em 0;
            }
            input, textarea, select, option {
                border: solid thin #888;
                box-sizing: border-box;
                font-size: 1em;
                padding: 0.5em;
                width: 100%;
            }
            label {
                padding: 0.5em 0;
            }
            input[type="submit"]{
                background-color: #bfb;
                border-radius: 0.354em;
                border: solid thin #888;
                color: black;
                font-size: 1.41em;
                font-weight: bold;
                padding: 0.354em 1em;
            }
            input[type="submit"]:hover {
                background-color: #9d9;
            }
            #error_explanation {
                background-color: white;
                border-radius: 1em;
                border: solid thin red;
                margin-bottom: 0.5em;
                padding: 0.5em;
                width: 100%;
                h2 {
                    background: none;
                    color: red;
                    font-size: 1.41em;
                    line-height: 1.41em;
                    padding: 1em;
                }
                ul {
                    margin-top: 0;
                    li {
                        color: red;
                        font-size: 1em;
                    }
                }
            }
            .field_with_errors {
                background: none;
                color: red;
                width: 100%;
                label {
                    font-weight: bold;
                }
                label::before {
                    content: "! "
                }
                input, textarea {
                    background: pink;
                }
            }
        }
    in app/models/order.rb
            add  validates :name, :address, :email, presence: true
                validates :pay_type, inclusion: pay_types.keys
*Capturing the order details
    in app/models/line_item.rb
        change  belongs_to :product
                belongs_to :cart
            to  belongs_to :order, optional: true
                belongs_to :product
                belongs_to :cart, optional: true
    in app/models/order.rb
        has_many :line_items, dependent: :destroy
        ...
        def add_line_items_from_cart(cart)
            cart.line_items.each do |item|
            item.cart_id = nil
            line_items << item
            end
        end
    in app/controllers/orders_controller.rb
        after @order = Order.new(order_params)
            add @order.add_line_items_from_cart(@cart)
        change format.html { redirect_to @order, notice: "Order was successfully created." }
            to Cart.destroy(session[:cart_id])
                session[:cart_id] = nil
                format.html { redirect_to store_index_url, notice: "Thank you for your order." }
    in app/models/order.rb
        add def add_line_items_from_cart(cart)
                cart.line_items.each do |item|
                item.cart_id = nil
                line_items << item
                end
            end
*Atom Feeds
    in app/controllers/products_controller.rb
        before private add 
            def who_bought
                @product = Product.find(params[:id])
                @latest_order = @product.orders.order(:updated_at).last
                if stale?(@latest_order)
                respond_to do |format|
                    format.atom
                end
                end
            end
    create a file app/views/products/who_bought.atom.builder
        atom_feed do |feed|
            feed.title "Who bought #{@product.title}"
            
            feed.update @latest_order.try(:updated_at)

            @product.orders.each do |order|
                feed.entry(order) do |entry|
                entry.title "Order #{order.id}"
                entry.summary type: 'xhtml' do |xhtml|
                    xhtml.p "Shipped to #{order.address}"

                    xhtml.table do
                    xhtml.tr do
                        xhtml.th 'Product'
                        xhtml.th 'Quantity'
                        xhtml.th 'Total Price'
                    end
                    order.line_items.each do |item|
                        xhtml.tr do
                        xhtml.td item.product.title
                        xhtml.td item.quantity
                        xhtml.td number_to_currency item.total_price
                        end
                    end
                    xhtml.tr do
                        xhtml.th 'total', colspan: 2
                        xhtml.th number_to_currency order.line_items.map(&:total_price).sum
                    end
                    end
                    xhtml.p "Paid by #{order.pay_type}"
                end
                entry.author do |author|
                    author.name order.name
                    author.email order.email
                end
                end
            end
        end
    in app/models/product.rb
        after has_many :line_items add
            has_many :orders, through: :line_items
    in config/routes.rb
        change resources :products to
            resources :products do
                get :who_bought, on: :member
            end
?Chapter 13 - Task H: Entering Additional Payment Details
*Adding Fields Dynamically to a Form
*INSTALLING REACT
    $ rails webpacker:install:react
    create a file app/javascript/packs/pay_type.jsx
        import React from 'react'
        import ReactDOM from 'react-dom'
        import PayTypeSelector from 'PayTypeSelector'

        document.addEventListener('turbolinks:load', function() {
            var element = document.getElementById("pay-type-component");
            ReactDOM.render(<PayTypeSelector />, element)
        });
    create a file app/javascript/PayTypeSelector/index.jsx
        import React from 'react'
        class PayTypeSelector extends React.Component {
            render() {
                return (
                        <div className="field">
                            <label htmlFor="order_pay_type">Pay type</label>
                            <select id="order_pay_type" name="order[pay_type]" onChange={this.onPayTypeSelected}>
                                <option value="">Select a payment method</option>
                                <option value="Check">Check</option>
                                <option value="Credit card">Credit card</option>
                                <option value="Purchase order">Purchase order</option>
                            </select>
                        </div>
                );
            }
        }
        export default PayTypeSelector
    in app/views/orders/new.html.erb
        after </section> add <%= javascript_pack_tag("pay_type") %>
    in app/views/orders/_form.html.erb
        change <div class="field">
                    <%= form.label :pay_type %>
                    <%= form.select :pay_type, Order.pay_types.keys, prompt: 'Select a payment method' %>
                </div>
            to <div id='pay-type-component'></div>
    in app/javascript/PayTypeSelector/index.jsx
        after import React from 'react'
            add import NoPayType from './NoPayType';
                import CreditCardPayType from './CreditCardPayType';
                import CheckPayType from './CheckPayType';
                import PurchaseOrderPayType from './PurchaseOrderPayType';
        before render()
            add constructor(props) {
                    super(props);
                    this.onPayTypeSelected = this.onPayTypeSelected.bind(this);
                    this.state = { selectedPayType: null}
                }
                onPayTypeSelected(event) {
                    this.setState({ selectedPayType: event.target.value });
                }
        after render() {
            add let PayTypeCustomComponent = NoPayType;
            if (this.state.selectedPayType == "Credit card") {
                PayTypeCustomComponent = CreditCardPayType;
            } else if (this.state.selectedPayType == "Check") {
                PayTypeCustomComponent = CheckPayType;
            } else if (this.state.selectedPayType == "Purchase order") {
                PayTypeCustomComponent = PurchaseOrderPayType;
            }
        after return add <div>
        after </select>
                </div>
            add <PayTypeCustomComponent />
                </div>
    create a file app/javascript/PayTypeSelector/NoPayType.jsx
        import React from 'react'
        class NoPayType extends React.Component{
            render() {
                return (<div></div>);
            }
        }
        export default NoPayType
    create a file app/javascript/PayTypeSelector/CheckPayType.jsx
        import React from 'react'
        class CheckPayType extends React.Component{
            render() {
                return (
                    <div>
                        <div className="field">
                            <label htmlFor="order_routing_number">Routing</label>
                            <input type="password" 
                                name="order[routing_number]" 
                                id="order_routing_number"/>
                        </div>
                        <div className="field">
                            <label htmlFor="order_account_number">Account #</label>
                            <input type="text" 
                                name="order[account_number]" 
                                id="order_account_number"/>
                        </div>
                    </div>
                );
            }
        }
        export default CheckPayType
    create a file app/javascript/PayTypeSelector/CreditCardPayType.jsx
        import React from 'react'
        class CreditCardPayType extends React.Component{
            render() {
                return (
                    <div>
                        <div className="field">
                            <label htmlFor="order_credit_card_number">CC #</label>
                            <input type="password" 
                                name="order[credit_card_number]" 
                                id="order_credit_card_number"/>
                        </div>
                        <div className="field">
                            <label htmlFor="order_expiration_date">Expiry</label>
                            <input type="text" 
                                name="order[expiration_date]" 
                                id="order_expiration_date"
                                size="9"
                                placeholder="e.g. 03/19"/>
                        </div>
                    </div>
                );
            }
        }
        export default CreditCardPayType
    create a file app/javascript/PayTypeSelector/PurchaseOrderPayType.jsx
        import React from 'react'
        class PurchaseOrderPayType extends React.Component{
            render() {
                return (
                    <div>
                        <div className="field">
                            <label htmlFor="order_po_number">PO #</label>
                            <input type="password" 
                                name="order[po_number]" 
                                id="order_po_number"/>
                        </div>
                    </div>
                );
            }
        }
        export default PurchaseOrderPayType
    in app/controllers/orders_controller.rb
        before private add
            def pay_type_params
                if order_params[:pay_type] == "Credit card"
                params.require(:order).permit(:credit_card_number, :expiration_date)
                elsif order_params[:pay_type] == "Check"
                params.require(:order).permit(:routing_number, :account_number)
                elsif order_params[:pay_type] == "Purchase order"
                params.require(:order).permit(:po_number)
                else
                {}
                end
            end
?Chapter 14 - Task I: Sending Emails and Processing Payments Efficiently
*Config Letter Opener (in carte seteaza pe Gmail)
    in gemfile section development add gem 'letter_opener_web', '~> 1.4'
    $ bundle install
    in config/enviroments/development.rb
        add config.action_mailer.delivery_method = :letter_opener_web
    in config/routes.rb
        add     if Rails.env.development?
                    mount LetterOpenerWeb::Engine, at: "\letter_opener"
                end
*Sending email
    $ rails g mailer Order received shipped
    in app/views/order_mailer/received.text.erb replace all with
        Dear <%= @order.name %>
        Thank you for yout recent order from The Pragmatic Store.
        <%= @greeting %>, find me in app/views/order_mailer/received.text.erb
        You ordered the following items:
        <%= render @order.line_items %>
        We'll send you a separate email when your order ships. 
    create a file app/views/line_items/_line_item.text.erb
        <%= sprintf("%2d x %s",
            line_item.quantity,
            truncate(line_item.product.title, length: 50)) %> 
    in app/mailers/order_mailer.rb
        replace def received ... end with
                def received(order)
                    @order = order
                    mail to: order.email, subject: 'Pragmatic Store Order Confirmation'
                end
    in app/controllers/orders_controller.rb
        after session[:cart_id] = nil
            add OrderMailer.received(@order).deliver_later
    in app/views/order_mailer/shiped.html.erb replace all with
             <h1>Pragmatic Order Shipped</h1>
            <p>
            This is just to let you know that we-ve shipped your recent order:
            </p>
            <table>
            <tr><th colspan="2">Qty</th><th>Description</th></tr>
            <%= render @order.line_items %>
            </table> 
    in app/mailers/order_mailer.rb
        replace def shiped ... end with
            def shipped(order)
                @order = order
                mail to: order.email, subject: 'Pragmatic Store Order Shipped'
            end
*Connecting to a Slow Payment Processor with Active Job
    create a file lib/pago.rb
        require 'ostruct'
        class Pago
        def self.make_payment(order_id:,
                                payment_method:,
                                payment_details:)
            case payment_method
            when :check
            Rails.logger.info "Processing check:" +
                payment_details.fetch(:routing).to_s + "/" +
                payment_details.fetch(:account).to_s        
            when :credit_card
            Rails.logger.info "Processing credit_card:" +
                payment_details.fetch(:cc_num).to_s + "/" +
                payment_details.fetch(:expiration_month).to_s  + "/" +
                payment_details.fetch(:expiration_year).to_s  
            when :po
            Rails.logger.info "Processing purchase order:" +
                payment_details.fetch(:po_num).to_s
            else
            raise "Unknown payment_method #{payment_method}"
            end
            sleep 3 unless Rails.env.test?
            Rails.logger.info "Done Processing Payment"
            OpenStruct.new(succeeded?: true)
        end
        end
    in app/models/order.rb
        before class Order add require 'pago'
        after def add_line_items_from_cart(cart) ... end
            add def change!(pay_type_params)
                    payment_details = {}
                    payment_method = nil

                    case pay_type
                    when "Check"
                        payment_method = :check
                        payment_details[:routing] = pay_type_params[:routing_number]
                        payment_details[:account] = pay_type_params[:account_number]
                    when "Credit card"
                        payment_method = :credit_card
                        month,year = pay_type_params[:expiration_date].split(//)
                        payment_details[:cc_num] = pay_type_params[:credit_card_number]
                        payment_details[:expiration_month] = month
                        payment_details[:expiration_year] = year
                    when "Purchase order"
                        payment_method = :po
                        payment_details[:po_num] = pay_type_params[:po_number]
                    end

                    payment_result = Pago.make_payment(
                    order_id: id,
                    payment_method: payment_method,
                    payment_details: payment_details
                    )

                    if payment_result.succeeded?
                        OrderMailer.received(self).deliver_later
                    else
                        raise payment_result.error
                    end
                end
    $ rails g job charge_order
    in app/jobs/charge_order_job.rb        
        replace def perform(*args)
                    # Do something later
                end
        with    def perform(order, pay_type_params)
                    order.change!(pay_type_params)
                end
    in app/controllers/orders_controller.rb
        replace OrderMailer.received(@order).deliver_later
        with ChargeOrderJob.perform_later(@order,pay_type_params.to_h)
?Chapter 15 - Task J: Logging In
*Adding Users
    $ rails g scaffold User name:string password:digest
    $ rails db:migrate
    in app/models/user.rb
        add validates :name, presence: true, uniqueness: true
    uncomment the bcrypt-ruby gem in your Gemfile
    $ bundle install
*Administering our users
    in app/controllers/users_controller.rb
        change format.html { redirect_to @user, notice: "User was successfully created." }
            to format.html { redirect_to users_url, notice: "User #{@user.name} was successfully created." }
        change format.html { redirect_to @user, notice: "User was successfully updated." }
            to format.html { redirect_to users_url, notice: "User #{@user.name} was successfully created." }
        change @users = User.all
            to @users = User.order(:name)
    in app/views/users/_form.html.erb
        wrapp all in <div class="depot_form"> ... </div>
        change  <div class="field">
                    <%= form.label :name %>
                    <%= form.text_field :name %>
                </div>
                <div class="field">
                    <%= form.label :password %>
                    <%= form.password_field :password %>
                </div>
                <div class="field">
                    <%= form.label :password_confirmation %>
                    <%= form.password_field :password_confirmation %>
                </div>
            to  <h2>Enter User Details</h2>
                <div class="field">
                    <%= form.label :name, 'Name:' %>
                    <%= form.text_field :name, size: 40 %>
                </div>
                <div class="field">
                    <%= form.label :password, 'Password:' %>
                    <%= form.password_field :password, size: 40 %>
                </div>
                <div class="field">
                    <%= form.label :password_confirmation, 'Confirm:' %>
                    <%= form.password_field :password_confirmation,
                        id: :user_password_confirmation,
                        size: 40 %>
                </div>
*Authenticating Users
    $ rails g controller Sessions new create destroy
    $ rails g controller Admin index
    in app/controllers/sessions_controller.rb
        change def create end
            to  def create
                    user = User.find_by(name: params[:name])
                    if user.try(:authenticate, params[:password])
                    session[:user_id] = user.id
                    redirect_to admin_url
                    else
                    redirect_to login_url, alert: "Invalid user/password combination"
                    end
                end
        change def destroy end
            to  def destroy
                    session[:user_id] = nil
                    redirect_to store_index_url, notice: "Logged out"
                end
    in app/views/sessions/new.html.erb change all to
        <section class="depot_form">
            <% if flash[:alert] %>
                <aside class="notice"><%= flash[:alert] %></aside>
            <% end %>

            <%= form_tag do %>
                <div class="field">
                    <%= label_tag :name, 'Name:' %>
                    <%= text_field_tag :name, params[:name] %>
                </div>
                <div class="field">
                    <%= label_tag :password, 'Password:' %>
                    <%= text_field_tag :password, params[:password] %>
                </div>
                <div class="actions">
                    <%= submit_tag "Login" %>
                </div>
            <% end %>
        </section>
    in app/views/admin/index.html.erb change all to
        <h1>Welcome</h1>
        <p>
            It's <%= Time.now %>.
            We have <%= pluralize(@total_orders, "order") %>
        </p>
    in app/controllers/admin_controller.rb
        inside index add @total_orders = Order.count
    in config/routes.rb
        change  get 'admin/index'
                get 'session/new'
            to  get 'admin' => 'admin#index'
                controller :sessions do
                    get 'login' => :new
                    post 'login' => :create
                    delete 'logout' => :destroy
                end
*Limiting Access
    in app/controllers/application_controller.rb
        add before_action :authorize
            protected
                def authorize
                    unless User.find_by(id: session[:user_id])
                        redirect_to login_url, notice: "Please log in"
                    end
                end
    in app/controllers/store_controller.rb in the begining add
        skip_before_action :authorize
    in app/controllers/sessions_controller.rb in the begining add
        skip_before_action :authorize
    in app/controllers/carts_controller.rb in the begining add
        skip_before_action :authorize, only: [:edit, :update, :destory]
    in app/controllers/line_items_controller.rb in the begining add
        skip_before_action :authorize, only: :create
    in app/controllers/orders_controller.rb in the begining add
        skip_before_action :authorize, only: [:new, :create]
*Adding a Sidebar, More Administration
    in app/views/layouts/application.html.erb
        after   <li><a href="/contact">Contact</a></li>
                </ul>
        add <% if session[:user_id] %>
                <nav class="logged_in_nav">
                    <ul>
                    <li><%= link_to 'Orders', orders_path %></li>
                    <li><%= link_to 'Products', products_path %></li>
                    <li><%= link_to 'Users', users_path %></li>
                    <li><%= button_to 'Logout', logout_path, method: :delete %></li>
                    </ul>
                </nav>
            <% end %>
    in app/assets/stylesheets/application.scss
        add  nav.logged_in_nav {
                border-top: solid thin #bfb;
                padding: 0.354em 0;
                margin-top: 0.354em;
                input[type="submit"] {
                    background: none;
                    border: none;
                    color: #bfb;
                    font-size: 1em;
                    letter-spacing: 0.354em;
                    margin: 0;
                    padding: 0;
                    text-transform: uppercase;
                }
                input[type="submit"]:hover {
                    color: white;
                }
            }
*Would the last admin to leave...
    in app/models/user.rb add
        after_destroy :ensure_an_admin_remains
        class Error < StandardError
        end

        private
            def ensure_an_admin_remains
            if User.count.zero?
                raise Error.new "Can't delete last user"
            end
            end
    in app/controllers/users_controller.rb
        after def destroy ... end
        add rescue_from 'User::Error' do |exception|
                redirect_to users_url, notice: exception.message
            end
?Chapter 16 - Task K: Internationalization

?Chapter 17 - Task L: Receive Emails and Respond with Rich Text
!end Depot
?Chapter 18 - Finding Your Way Around Rails
?Chapter 19 - Active Record
?Chapter 20 - Action Dispacth and Action Controller
?Chapter 21 - Action View
?Chapter 22 - Migrations
?Chapter 23 - Customizing and Extending Rails